/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.3.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {mergeMap as _observableMergeMap, catchError as _observableCatch} from 'rxjs/operators';
import {Observable, throwError as _observableThrow, of as _observableOf} from 'rxjs';
import {Injectable, Inject, Optional, InjectionToken} from '@angular/core';
import {HttpClient, HttpHeaders, HttpResponse, HttpResponseBase} from '@angular/common/http';

export const CHEESEYMART_API_BASE_URL = new InjectionToken<string>('CHEESEYMART_API_BASE_URL');

@Injectable()
export class CheesyProductCatalogClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(CHEESEYMART_API_BASE_URL) baseUrl?: string,
  ) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : '';
  }

  /**
   * @param name (optional)
   * @param cheeseType (optional)
   * @param cheeseColor (optional)
   * @return Success
   */
  getAll(
    name: (string | undefined)[] | null | undefined,
    cheeseType: (string | undefined)[] | null | undefined,
    cheeseColor: (string | undefined)[] | null | undefined,
  ): Observable<CheesyProductsModel> {
    let url_ = this.baseUrl + '/api/CheeseProduct?';
    if (name !== undefined)
      name &&
        name.forEach((item) => {
          url_ += 'name=' + encodeURIComponent('' + item) + '&';
        });
    if (cheeseType !== undefined)
      cheeseType &&
        cheeseType.forEach((item) => {
          url_ += 'cheeseType=' + encodeURIComponent('' + item) + '&';
        });
    if (cheeseColor !== undefined)
      cheeseColor &&
        cheeseColor.forEach((item) => {
          url_ += 'cheeseColor=' + encodeURIComponent('' + item) + '&';
        });
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(<any>response_);
            } catch (e) {
              return <Observable<CheesyProductsModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<CheesyProductsModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processGetAll(response: HttpResponseBase): Observable<CheesyProductsModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CheesyProductsModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<CheesyProductsModel>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(body: CheesyProductModel | null | undefined): Observable<CheesyProductModel> {
    let url_ = this.baseUrl + '/api/CheeseProduct';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreate(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreate(<any>response_);
            } catch (e) {
              return <Observable<CheesyProductModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<CheesyProductModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processCreate(response: HttpResponseBase): Observable<CheesyProductModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CheesyProductModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<CheesyProductModel>(<any>null);
  }

  /**
   * @return Success
   */
  get(id: number): Observable<CheesyProductModel> {
    let url_ = this.baseUrl + '/api/CheeseProduct/{id}';
    if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGet(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGet(<any>response_);
            } catch (e) {
              return <Observable<CheesyProductModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<CheesyProductModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processGet(response: HttpResponseBase): Observable<CheesyProductModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CheesyProductModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<CheesyProductModel>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  update(id: number, body: CheesyProductModel | null | undefined): Observable<CheesyProductModel> {
    let url_ = this.baseUrl + '/api/CheeseProduct/{id}';
    if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(<any>response_);
            } catch (e) {
              return <Observable<CheesyProductModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<CheesyProductModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processUpdate(response: HttpResponseBase): Observable<CheesyProductModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CheesyProductModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<CheesyProductModel>(<any>null);
  }

  /**
   * @return Success
   */
  delete(id: number): Observable<CheesyProductModel> {
    let url_ = this.baseUrl + '/api/CheeseProduct/{id}';
    if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(<any>response_);
            } catch (e) {
              return <Observable<CheesyProductModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<CheesyProductModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processDelete(response: HttpResponseBase): Observable<CheesyProductModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CheesyProductModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<CheesyProductModel>(<any>null);
  }
}

@Injectable()
export class MetadataClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(CHEESEYMART_API_BASE_URL) baseUrl?: string,
  ) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getValuesByType(type: string): Observable<MetadataModel> {
    let url_ = this.baseUrl + '/api/Metadata/{type}';
    if (type === undefined || type === null)
      throw new Error("The parameter 'type' must be defined.");
    url_ = url_.replace('{type}', encodeURIComponent('' + type));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetValuesByType(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetValuesByType(<any>response_);
            } catch (e) {
              return <Observable<MetadataModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<MetadataModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processGetValuesByType(response: HttpResponseBase): Observable<MetadataModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = MetadataModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<MetadataModel>(<any>null);
  }
}

@Injectable()
export class ProductImageClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(CHEESEYMART_API_BASE_URL) baseUrl?: string,
  ) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : '';
  }

  /**
   * @return Success
   */
  get(id: number): Observable<FileResponse> {
    let url_ = this.baseUrl + '/api/ProductImage/{id}';
    if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGet(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGet(<any>response_);
            } catch (e) {
              return <Observable<FileResponse>>(<any>_observableThrow(e));
            }
          } else return <Observable<FileResponse>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processGet(response: HttpResponseBase): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get('content-disposition')
        : undefined;
      const fileNameMatch = contentDisposition
        ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
        : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({
        fileName: fileName,
        data: <any>responseBlob,
        status: status,
        headers: _headers,
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<FileResponse>(<any>null);
  }

  /**
   * @return Success
   */
  delete(id: number): Observable<ActionResult> {
    let url_ = this.baseUrl + '/api/ProductImage/{id}';
    if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(<any>response_);
            } catch (e) {
              return <Observable<ActionResult>>(<any>_observableThrow(e));
            }
          } else return <Observable<ActionResult>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processDelete(response: HttpResponseBase): Observable<ActionResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ActionResult.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<ActionResult>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(body: ProductImageCommandModel | null | undefined): Observable<ProductImageModel> {
    let url_ = this.baseUrl + '/api/ProductImage';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreate(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreate(<any>response_);
            } catch (e) {
              return <Observable<ProductImageModel>>(<any>_observableThrow(e));
            }
          } else return <Observable<ProductImageModel>>(<any>_observableThrow(response_));
        }),
      );
  }

  protected processCreate(response: HttpResponseBase): Observable<ProductImageModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
          ? (<any>response).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ProductImageModel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<ProductImageModel>(<any>null);
  }
}

export class ActionResult implements IActionResult {
  constructor(data?: IActionResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {}

  static fromJS(data: any): ActionResult {
    data = typeof data === 'object' ? data : {};
    let result = new ActionResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    return data;
  }
}

export interface IActionResult {}

export class CheesyProductModel implements ICheesyProductModel {
  id?: number | undefined;
  lastUpdated?: Date | undefined;
  name?: string | undefined;
  cheeseType?: string | undefined;
  color?: string | undefined;
  pricePerKilo?: number | undefined;
  productImages?: number[] | undefined;

  constructor(data?: ICheesyProductModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data['id'];
      this.lastUpdated = data['lastUpdated']
        ? new Date(data['lastUpdated'].toString())
        : <any>undefined;
      this.name = data['name'];
      this.cheeseType = data['cheeseType'];
      this.color = data['color'];
      this.pricePerKilo = data['pricePerKilo'];
      if (Array.isArray(data['productImages'])) {
        this.productImages = [] as any;
        for (let item of data['productImages']) this.productImages!.push(item);
      }
    }
  }

  static fromJS(data: any): CheesyProductModel {
    data = typeof data === 'object' ? data : {};
    let result = new CheesyProductModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['lastUpdated'] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>undefined;
    data['name'] = this.name;
    data['cheeseType'] = this.cheeseType;
    data['color'] = this.color;
    data['pricePerKilo'] = this.pricePerKilo;
    if (Array.isArray(this.productImages)) {
      data['productImages'] = [];
      for (let item of this.productImages) data['productImages'].push(item);
    }
    return data;
  }
}

export interface ICheesyProductModel {
  id?: number | undefined;
  lastUpdated?: Date | undefined;
  name?: string | undefined;
  cheeseType?: string | undefined;
  color?: string | undefined;
  pricePerKilo?: number | undefined;
  productImages?: number[] | undefined;
}

export class CheesyProductsModel implements ICheesyProductsModel {
  products?: CheesyProductModel[] | undefined;

  constructor(data?: ICheesyProductsModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      if (Array.isArray(data['products'])) {
        this.products = [] as any;
        for (let item of data['products']) this.products!.push(CheesyProductModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CheesyProductsModel {
    data = typeof data === 'object' ? data : {};
    let result = new CheesyProductsModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.products)) {
      data['products'] = [];
      for (let item of this.products) data['products'].push(item.toJSON());
    }
    return data;
  }
}

export interface ICheesyProductsModel {
  products?: CheesyProductModel[] | undefined;
}

export class MetadataModel implements IMetadataModel {
  items?: string[] | undefined;
  type?: string | undefined;

  constructor(data?: IMetadataModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      if (Array.isArray(data['items'])) {
        this.items = [] as any;
        for (let item of data['items']) this.items!.push(item);
      }
      this.type = data['type'];
    }
  }

  static fromJS(data: any): MetadataModel {
    data = typeof data === 'object' ? data : {};
    let result = new MetadataModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item);
    }
    data['type'] = this.type;
    return data;
  }
}

export interface IMetadataModel {
  items?: string[] | undefined;
  type?: string | undefined;
}

export class ProductImageCommandModel implements IProductImageCommandModel {
  id?: number | undefined;
  cheesyProductId?: number | undefined;
  alternateText?: string | undefined;
  mimeType?: string | undefined;
  data?: string | undefined;

  constructor(data?: IProductImageCommandModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data['id'];
      this.cheesyProductId = data['cheesyProductId'];
      this.alternateText = data['alternateText'];
      this.mimeType = data['mimeType'];
      this.data = data['data'];
    }
  }

  static fromJS(data: any): ProductImageCommandModel {
    data = typeof data === 'object' ? data : {};
    let result = new ProductImageCommandModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cheesyProductId'] = this.cheesyProductId;
    data['alternateText'] = this.alternateText;
    data['mimeType'] = this.mimeType;
    data['data'] = this.data;
    return data;
  }
}

export interface IProductImageCommandModel {
  id?: number | undefined;
  cheesyProductId?: number | undefined;
  alternateText?: string | undefined;
  mimeType?: string | undefined;
  data?: string | undefined;
}

export class ProductImageModel implements IProductImageModel {
  id?: number | undefined;
  cheesyProductId?: number | undefined;
  alternateText?: string | undefined;
  mimeType?: string | undefined;
  data?: string | undefined;

  constructor(data?: IProductImageModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data['id'];
      this.cheesyProductId = data['cheesyProductId'];
      this.alternateText = data['alternateText'];
      this.mimeType = data['mimeType'];
      this.data = data['data'];
    }
  }

  static fromJS(data: any): ProductImageModel {
    data = typeof data === 'object' ? data : {};
    let result = new ProductImageModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cheesyProductId'] = this.cheesyProductId;
    data['alternateText'] = this.alternateText;
    data['mimeType'] = this.mimeType;
    data['data'] = this.data;
    return data;
  }
}

export interface IProductImageModel {
  id?: number | undefined;
  cheesyProductId?: number | undefined;
  alternateText?: string | undefined;
  mimeType?: string | undefined;
  data?: string | undefined;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: {[name: string]: any};
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: {[key: string]: any};
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: {[key: string]: any},
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: {[key: string]: any},
  result?: any,
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
